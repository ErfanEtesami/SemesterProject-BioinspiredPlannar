import matplotlib.pyplot as plt


def plot_full(m, g, v_d, torque_sat, t_axis,
              x_com_axis, y_com_axis, z_com_axis, th_com_axis, vx_com_axis, vz_com_axis, wth_com_axis,
              fb_tot_x_fl_axis, fb_tot_z_fl_axis, fb_x_pd_fl_axis, fb_z_pd_fl_axis, fb_th_pd_fl_axis,
              fb_x_p_fl_axis, fb_x_d_fl_axis, fb_z_p_fl_axis, fb_z_d_fl_axis, fb_th_p_fl_axis, fb_th_d_fl_axis,
              fb_tot_x_fr_axis, fb_tot_z_fr_axis, fb_x_pd_fr_axis, fb_z_pd_fr_axis, fb_th_pd_fr_axis,
              fb_x_p_fr_axis, fb_x_d_fr_axis, fb_z_p_fr_axis, fb_z_d_fr_axis, fb_th_p_fr_axis, fb_th_d_fr_axis,
              fb_tot_x_bl_axis, fb_tot_z_bl_axis, fb_x_pd_bl_axis, fb_z_pd_bl_axis, fb_th_pd_bl_axis,
              fb_x_p_bl_axis, fb_x_d_bl_axis, fb_z_p_bl_axis, fb_z_d_bl_axis, fb_th_p_bl_axis, fb_th_d_bl_axis,
              fb_tot_x_br_axis, fb_tot_z_br_axis, fb_x_pd_br_axis, fb_z_pd_br_axis, fb_th_pd_br_axis,
              fb_x_p_br_axis, fb_x_d_br_axis, fb_z_p_br_axis, fb_z_d_br_axis, fb_th_p_br_axis, fb_th_d_br_axis,
              torque_fl_hip_axis, torque_fl_knee_axis, torque_fr_hip_axis, torque_fr_knee_axis,
              torque_bl_hip_axis, torque_bl_knee_axis, torque_br_hip_axis, torque_br_knee_axis,
              cnt_x_fl_axis, cnt_z_fl_axis, cnt_x_fr_axis, cnt_z_fr_axis,
              cnt_x_bl_axis, cnt_z_bl_axis, cnt_x_br_axis, cnt_z_br_axis,
              action_x_fl_axis, action_z_fl_axis, action_x_fr_axis, action_z_fr_axis,
              action_x_bl_axis, action_z_bl_axis, action_x_br_axis, action_z_br_axis,
              tf_x_fl_axis, tf_z_fl_axis, tf_x_fr_axis, tf_z_fr_axis,
              tf_x_bl_axis, tf_z_bl_axis, tf_x_br_axis, tf_z_br_axis,
              x_fl_axis, x_fr_axis, x_bl_axis, x_br_axis,
              z_fl_axis, z_fr_axis, z_bl_axis, z_br_axis,
              vx_fl_axis, vx_fr_axis, vx_bl_axis, vx_br_axis,
              vz_fl_axis, vz_fr_axis, vz_bl_axis, vz_br_axis,
              mech_pow_hip_fl_axis, mech_pow_knee_fl_axis, mech_pow_tot_fl_axis,
              mech_pow_hip_fr_axis, mech_pow_knee_fr_axis, mech_pow_tot_fr_axis,
              mech_pow_hip_bl_axis, mech_pow_knee_bl_axis, mech_pow_tot_bl_axis,
              mech_pow_hip_br_axis, mech_pow_knee_br_axis, mech_pow_tot_br_axis,
              x_traj_sw_org, z_traj_sw_org,
              t_st_front_axis, t_st_back_axis):
    """
    Plot the results and gathered data during the whole simulation.
    """
    # joint torques
    fig, gph = plt.subplots(2, 2, constrained_layout=True, figsize=(12, 6))
    gph[0, 0].plot(t_axis, torque_fl_hip_axis)
    gph[0, 0].plot(t_axis, torque_fl_knee_axis)
    gph[0, 0].axhline(y=torque_sat, c='r')
    gph[0, 0].axhline(y=-torque_sat, c='r')
    gph[0, 0].grid()
    gph[0, 0].set_ylim([-torque_sat-0.3, torque_sat+0.3])
    gph[0, 0].set_title('front left leg')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('T (N.m)')
    gph[0, 0].legend(['hip', 'knee'])
    gph[0, 1].plot(t_axis, torque_fr_hip_axis)
    gph[0, 1].plot(t_axis, torque_fr_knee_axis)
    gph[0, 1].axhline(y=torque_sat, c='r')
    gph[0, 1].axhline(y=-torque_sat, c='r')
    gph[0, 1].grid()
    gph[0, 1].set_ylim([-torque_sat-0.3, torque_sat+0.3])
    gph[0, 1].set_title('front right leg')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('T (N.m)')
    gph[0, 1].legend(['hip', 'knee'])
    gph[1, 0].plot(t_axis, torque_bl_hip_axis)
    gph[1, 0].plot(t_axis, torque_bl_knee_axis)
    gph[1, 0].axhline(y=torque_sat, c='r')
    gph[1, 0].axhline(y=-torque_sat, c='r')
    gph[1, 0].grid()
    gph[1, 0].set_ylim([-torque_sat-0.3, torque_sat+0.3])
    gph[1, 0].set_title('back left leg')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('T (N.m)')
    gph[1, 0].legend(['hip', 'knee'])
    gph[1, 1].plot(t_axis, torque_br_hip_axis)
    gph[1, 1].plot(t_axis, torque_br_knee_axis)
    gph[1, 1].axhline(y=torque_sat, c='r')
    gph[1, 1].axhline(y=-torque_sat, c='r')
    gph[1, 1].grid()
    gph[1, 1].set_ylim([-torque_sat-0.3, torque_sat+0.3])
    gph[1, 1].set_title('back right leg')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('T (N.m)')
    gph[1, 1].legend(['hip', 'knee'])
    fig.savefig('./plots/solo_hopping_joint_torques.png')
    # total force (action) + contact force + feedback  + pybullet measured forces in x and z directions
    fig, gph = plt.subplots(4, 4, constrained_layout=True, figsize=(24, 12))
    gph[0, 0].plot(t_axis, action_x_fl_axis)
    gph[0, 0].plot(t_axis, cnt_x_fl_axis, '--')
    gph[0, 0].plot(t_axis, fb_tot_x_fl_axis, '--')
    gph[0, 0].grid()
    gph[0, 0].set_title('front left leg - x forces')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('F (N)')
    gph[0, 0].legend(['total', 'contact', 'feedback'])
    gph[1, 0].plot(t_axis, action_x_fr_axis)
    gph[1, 0].plot(t_axis, cnt_x_fr_axis, '--')
    gph[1, 0].plot(t_axis, fb_tot_x_fr_axis, '--')
    gph[1, 0].grid()
    gph[1, 0].set_title('front right leg - x forces')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('F (N)')
    gph[1, 0].legend(['total', 'contact', 'feedback'])
    gph[2, 0].plot(t_axis, action_x_bl_axis)
    gph[2, 0].plot(t_axis, cnt_x_bl_axis, '--')
    gph[2, 0].plot(t_axis, fb_tot_x_bl_axis, '--')
    gph[2, 0].grid()
    gph[2, 0].set_title('back left leg - x forces')
    gph[2, 0].set_xlabel('t (s)')
    gph[2, 0].set_ylabel('F (N)')
    gph[2, 0].legend(['total', 'contact', 'feedback'])
    gph[3, 0].plot(t_axis, action_x_br_axis)
    gph[3, 0].plot(t_axis, cnt_x_br_axis, '--')
    gph[3, 0].plot(t_axis, fb_tot_x_br_axis, '--')
    gph[3, 0].grid()
    gph[3, 0].set_title('back right leg - x forces')
    gph[3, 0].set_xlabel('t (s)')
    gph[3, 0].set_ylabel('F (N)')
    gph[3, 0].legend(['total', 'contact', 'feedback'])
    gph[0, 1].plot(t_axis, tf_x_fl_axis)
    gph[0, 1].grid()
    gph[0, 1].set_title('front left foot - measured x forces')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('F (N)')
    gph[1, 1].plot(t_axis, tf_x_fr_axis)
    gph[1, 1].grid()
    gph[1, 1].set_title('front right foot - measured x forces')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('F (N)')
    gph[2, 1].plot(t_axis, tf_x_bl_axis)
    gph[2, 1].grid()
    gph[2, 1].set_title('back left foot - measured x forces')
    gph[2, 1].set_xlabel('t (s)')
    gph[2, 1].set_ylabel('F (N)')
    gph[3, 1].plot(t_axis, tf_x_br_axis)
    gph[3, 1].grid()
    gph[3, 1].set_title('back right foot - measured x forces')
    gph[3, 1].set_xlabel('t (s)')
    gph[3, 1].set_ylabel('F (N)')
    gph[0, 2].plot(t_axis, action_z_fl_axis)
    gph[0, 2].plot(t_axis, cnt_z_fl_axis, '--')
    gph[0, 2].plot(t_axis, fb_tot_z_fl_axis, '--')
    gph[0, 2].axhline(y=m*g/4, c='r')
    gph[0, 2].grid()
    gph[0, 2].set_title('front left leg - z forces')
    gph[0, 2].set_xlabel('t (s)')
    gph[0, 2].set_ylabel('F (N)')
    gph[0, 2].legend(['total', 'contact', 'feedback'])
    gph[1, 2].plot(t_axis, action_z_fr_axis)
    gph[1, 2].plot(t_axis, cnt_z_fr_axis, '--')
    gph[1, 2].plot(t_axis, fb_tot_z_fr_axis, '--')
    gph[1, 2].axhline(y=m*g/4, c='r')
    gph[1, 2].grid()
    gph[1, 2].set_title('front right leg - z forces')
    gph[1, 2].set_xlabel('t (s)')
    gph[1, 2].set_ylabel('F (N)')
    gph[1, 2].legend(['total', 'contact', 'feedback'])
    gph[2, 2].plot(t_axis, action_z_bl_axis)
    gph[2, 2].plot(t_axis, cnt_z_bl_axis, '--')
    gph[2, 2].plot(t_axis, fb_tot_z_bl_axis, '--')
    gph[2, 2].axhline(y=m*g/4, c='r')
    gph[2, 2].grid()
    gph[2, 2].set_title('back left leg - z forces')
    gph[2, 2].set_xlabel('t (s)')
    gph[2, 2].set_ylabel('F (N)')
    gph[2, 2].legend(['total', 'contact', 'feedback'])
    gph[3, 2].plot(t_axis, action_z_br_axis)
    gph[3, 2].plot(t_axis, cnt_z_br_axis, '--')
    gph[3, 2].plot(t_axis, fb_tot_z_br_axis, '--')
    gph[3, 2].axhline(y=m*g/4, c='r')
    gph[3, 2].grid()
    gph[3, 2].set_title('back right leg - z forces')
    gph[3, 2].set_xlabel('t (s)')
    gph[3, 2].set_ylabel('F (N)')
    gph[3, 2].legend(['total', 'contact', 'feedback'])
    gph[0, 3].plot(t_axis, tf_z_fl_axis)
    gph[0, 3].grid()
    gph[0, 3].set_title('front left foot - measured z forces')
    gph[0, 3].set_xlabel('t (s)')
    gph[0, 3].set_ylabel('F (N)')
    gph[1, 3].plot(t_axis, tf_z_fr_axis)
    gph[1, 3].grid()
    gph[1, 3].set_title('front right foot - measured z forces')
    gph[1, 3].set_xlabel('t (s)')
    gph[1, 3].set_ylabel('F (N)')
    gph[2, 3].plot(t_axis, tf_z_bl_axis)
    gph[2, 3].grid()
    gph[2, 3].set_title('back left foot - measured z forces')
    gph[2, 3].set_xlabel('t (s)')
    gph[2, 3].set_ylabel('F (N)')
    gph[3, 3].plot(t_axis, tf_z_br_axis)
    gph[3, 3].grid()
    gph[3, 3].set_title('back right foot - measured z forces')
    gph[3, 3].set_xlabel('t (s)')
    gph[3, 3].set_ylabel('F (N)')
    fig.savefig('./plots/solo_hopping_force_profiles.png')
    # CoM coordinates
    fig, gph = plt.subplots(4, 2, constrained_layout=True, figsize=(12, 12))
    gph[0, 0].plot(t_axis, x_com_axis)
    gph[0, 0].grid()
    gph[0, 0].set_title('x_com vs t')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('x_com (m)')
    gph[0, 1].plot(t_axis, vx_com_axis)
    gph[0, 1].axhline(y=v_d, c='r')
    gph[0, 1].grid()
    gph[0, 1].set_title('vx_com vs t')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('vx_com (m/s)')
    gph[1, 0].plot(t_axis, z_com_axis)
    gph[1, 0].grid()
    gph[1, 0].set_title('z_com vs t')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('z_com (m)')
    gph[1, 1].plot(t_axis, vz_com_axis)
    gph[1, 1].grid()
    gph[1, 1].set_title('vz_com vs t')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('vz_com (m/s)')
    gph[2, 0].plot(t_axis, th_com_axis)
    gph[2, 0].grid()
    gph[2, 0].set_title('th_com vs t')
    gph[2, 0].set_xlabel('t (s)')
    gph[2, 0].set_ylabel('th_com (rad)')
    gph[2, 1].plot(t_axis, wth_com_axis)
    gph[2, 1].grid()
    gph[2, 1].set_title('wth_com vs t')
    gph[2, 1].set_xlabel('t (s)')
    gph[2, 1].set_ylabel('wth_com (rad/s)')
    gph[3, 0].plot(t_axis, y_com_axis)
    gph[3, 0].grid()
    gph[3, 0].set_title('y_com vs t')
    gph[3, 0].set_xlabel('t (s)')
    gph[3, 0].set_ylabel('y_com (m)')
    gph[3, 1].plot(th_com_axis, wth_com_axis)
    gph[3, 1].grid()
    gph[3, 1].set_title('angular velocity vs angular position of the CoM')
    gph[3, 1].set_xlabel('th_com (rad)')
    gph[3, 1].set_ylabel('wth_com (rad/s)')
    fig.savefig('./plots/solo_hopping_CoM_coordinates.png')
    # contact force profiles
    fig, gph = plt.subplots(4, 2, constrained_layout=True, figsize=(24, 12))
    gph[0, 0].plot(t_axis, cnt_x_fl_axis)
    gph[0, 0].grid()
    gph[0, 0].set_title('front left leg - x contact profile')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('F (N)')
    gph[1, 0].plot(t_axis, cnt_x_fr_axis)
    gph[1, 0].grid()
    gph[1, 0].set_title('front right leg - x contact profile')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('F (N)')
    gph[2, 0].plot(t_axis, cnt_x_bl_axis)
    gph[2, 0].grid()
    gph[2, 0].set_title('back left leg - x contact profile')
    gph[2, 0].set_xlabel('t (s)')
    gph[2, 0].set_ylabel('F (N)')
    gph[3, 0].plot(t_axis, cnt_x_br_axis)
    gph[3, 0].grid()
    gph[3, 0].set_title('back right leg - x contact profile')
    gph[3, 0].set_xlabel('t (s)')
    gph[3, 0].set_ylabel('F (N)')
    gph[0, 1].plot(t_axis, cnt_z_fl_axis)
    gph[0, 1].grid()
    gph[0, 1].set_title('front left leg - z contact profile')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('F (N)')
    gph[1, 1].plot(t_axis, cnt_z_fr_axis)
    gph[1, 1].grid()
    gph[1, 1].set_title('front right leg - z contact profile')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('F (N)')
    gph[2, 1].plot(t_axis, cnt_z_bl_axis)
    gph[2, 1].grid()
    gph[2, 1].set_title('back left leg - z contact profile')
    gph[2, 1].set_xlabel('t (s)')
    gph[2, 1].set_ylabel('F (N)')
    gph[3, 1].plot(t_axis, cnt_z_br_axis)
    gph[3, 1].grid()
    gph[3, 1].set_title('back right leg - z contact profile')
    gph[3, 1].set_xlabel('t (s)')
    gph[3, 1].set_ylabel('F (N)')
    fig.savefig('./plots/solo_hopping_contact_forces_simulation.png')
    # feedbacks in details
    fig, gph = plt.subplots(4, 3, constrained_layout=True, figsize=(24, 18))
    gph[0, 0].plot(t_axis, fb_x_p_fl_axis)
    gph[0, 0].plot(t_axis, fb_x_d_fl_axis)
    gph[0, 0].plot(t_axis, fb_x_pd_fl_axis)
    gph[0, 0].grid()
    gph[0, 0].set_title('front left leg - x feedback forces')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('feedback force (N)')
    gph[0, 0].legend(['proportional', 'derivative', 'total'])
    gph[0, 1].plot(t_axis, fb_z_p_fl_axis)
    gph[0, 1].plot(t_axis, fb_z_d_fl_axis)
    gph[0, 1].plot(t_axis, fb_z_pd_fl_axis)
    gph[0, 1].grid()
    gph[0, 1].set_title('front left leg - z feedback forces')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('feedback force (N)')
    gph[0, 1].legend(['proportional', 'derivative', 'total'])
    gph[0, 2].plot(t_axis, fb_th_p_fl_axis)
    gph[0, 2].plot(t_axis, fb_th_d_fl_axis)
    gph[0, 2].plot(t_axis, fb_th_pd_fl_axis)
    gph[0, 2].grid()
    gph[0, 2].set_title('front left leg - th feedback forces')
    gph[0, 2].set_xlabel('t (s)')
    gph[0, 2].set_ylabel('feedback force (N)')
    gph[0, 2].legend(['proportional', 'derivative', 'total'])
    gph[1, 0].plot(t_axis, fb_x_p_fr_axis)
    gph[1, 0].plot(t_axis, fb_x_d_fr_axis)
    gph[1, 0].plot(t_axis, fb_x_pd_fr_axis)
    gph[1, 0].grid()
    gph[1, 0].set_title('front right leg - x feedback forces')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('feedback force (N)')
    gph[1, 0].legend(['proportional', 'derivative', 'total'])
    gph[1, 1].plot(t_axis, fb_z_p_fr_axis)
    gph[1, 1].plot(t_axis, fb_z_d_fr_axis)
    gph[1, 1].plot(t_axis, fb_z_pd_fr_axis)
    gph[1, 1].grid()
    gph[1, 1].set_title('front right leg - z feedback forces')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('feedback force (N)')
    gph[1, 1].legend(['proportional', 'derivative', 'total'])
    gph[1, 2].plot(t_axis, fb_th_p_fr_axis)
    gph[1, 2].plot(t_axis, fb_th_d_fr_axis)
    gph[1, 2].plot(t_axis, fb_th_pd_fr_axis)
    gph[1, 2].grid()
    gph[1, 2].set_title('front right leg - th feedback forces')
    gph[1, 2].set_xlabel('t (s)')
    gph[1, 2].set_ylabel('feedback force (N)')
    gph[1, 2].legend(['proportional', 'derivative', 'total'])
    gph[2, 0].plot(t_axis, fb_x_p_bl_axis)
    gph[2, 0].plot(t_axis, fb_x_d_bl_axis)
    gph[2, 0].plot(t_axis, fb_x_pd_bl_axis)
    gph[2, 0].grid()
    gph[2, 0].set_title('back left leg - x feedback forces')
    gph[2, 0].set_xlabel('t (s)')
    gph[2, 0].set_ylabel('feedback force (N)')
    gph[2, 0].legend(['proportional', 'derivative', 'total'])
    gph[2, 1].plot(t_axis, fb_z_p_bl_axis)
    gph[2, 1].plot(t_axis, fb_z_d_bl_axis)
    gph[2, 1].plot(t_axis, fb_z_pd_bl_axis)
    gph[2, 1].grid()
    gph[2, 1].set_title('back left leg - z feedback forces')
    gph[2, 1].set_xlabel('t (s)')
    gph[2, 1].set_ylabel('feedback force (N)')
    gph[2, 1].legend(['proportional', 'derivative', 'total'])
    gph[2, 2].plot(t_axis, fb_th_p_bl_axis)
    gph[2, 2].plot(t_axis, fb_th_d_bl_axis)
    gph[2, 2].plot(t_axis, fb_th_pd_bl_axis)
    gph[2, 2].grid()
    gph[2, 2].set_title('back left leg - th feedback forces')
    gph[2, 2].set_xlabel('t (s)')
    gph[2, 2].set_ylabel('feedback force (N)')
    gph[2, 2].legend(['proportional', 'derivative', 'total'])
    gph[3, 0].plot(t_axis, fb_x_p_br_axis)
    gph[3, 0].plot(t_axis, fb_x_d_br_axis)
    gph[3, 0].plot(t_axis, fb_x_pd_br_axis)
    gph[3, 0].grid()
    gph[3, 0].set_title('back right leg - x feedback forces')
    gph[3, 0].set_xlabel('t (s)')
    gph[3, 0].set_ylabel('feedback force (N)')
    gph[3, 0].legend(['proportional', 'derivative', 'total'])
    gph[3, 1].plot(t_axis, fb_z_p_br_axis)
    gph[3, 1].plot(t_axis, fb_z_d_br_axis)
    gph[3, 1].plot(t_axis, fb_z_pd_br_axis)
    gph[3, 1].grid()
    gph[3, 1].set_title('back right leg - z feedback forces')
    gph[3, 1].set_xlabel('t (s)')
    gph[3, 1].set_ylabel('feedback force (N)')
    gph[3, 1].legend(['proportional', 'derivative', 'total'])
    gph[3, 2].plot(t_axis, fb_th_p_br_axis)
    gph[3, 2].plot(t_axis, fb_th_d_br_axis)
    gph[3, 2].plot(t_axis, fb_th_pd_br_axis)
    gph[3, 2].grid()
    gph[3, 2].set_title('back right leg - th feedback forces')
    gph[3, 2].set_xlabel('t (s)')
    gph[3, 2].set_ylabel('feedback force (N)')
    gph[3, 2].legend(['proportional', 'derivative', 'total'])
    fig.savefig('./plots/solo_hopping_feedbacks.png')
    # mechanical power
    fig, gph = plt.subplots(2, 2, constrained_layout=True, figsize=(12, 6))
    gph[0, 0].plot(t_axis, mech_pow_hip_fl_axis)
    gph[0, 0].plot(t_axis, mech_pow_knee_fl_axis)
    gph[0, 0].plot(t_axis, mech_pow_tot_fl_axis)
    gph[0, 0].grid()
    gph[0, 0].set_title('front left leg - mechanical power')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('power (Watt)')
    gph[0, 0].legend(['hip', 'knee', 'total'])
    gph[0, 1].plot(t_axis, mech_pow_hip_fr_axis)
    gph[0, 1].plot(t_axis, mech_pow_knee_fr_axis)
    gph[0, 1].plot(t_axis, mech_pow_tot_fr_axis)
    gph[0, 1].grid()
    gph[0, 1].set_title('front right leg - mechanical power')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('power (Watt)')
    gph[0, 1].legend(['hip', 'knee', 'total'])
    gph[1, 0].plot(t_axis, mech_pow_hip_bl_axis)
    gph[1, 0].plot(t_axis, mech_pow_knee_bl_axis)
    gph[1, 0].plot(t_axis, mech_pow_tot_bl_axis)
    gph[1, 0].grid()
    gph[1, 0].set_title('back left leg - mechanical power')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('power (Watt)')
    gph[1, 0].legend(['hip', 'knee', 'total'])
    gph[1, 1].plot(t_axis, mech_pow_hip_br_axis)
    gph[1, 1].plot(t_axis, mech_pow_knee_br_axis)
    gph[1, 1].plot(t_axis, mech_pow_tot_br_axis)
    gph[1, 1].grid()
    gph[1, 1].set_title('back right leg - mechanical power')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('power (Watt)')
    gph[1, 1].legend(['hip', 'knee', 'total'])
    fig.savefig('./plots/solo_hopping_mechanical_power.png')
    # toe trajectory
    fig, gph = plt.subplots(4, 5, constrained_layout=True, figsize=(30, 12))
    gph[0, 0].plot(t_axis, x_fl_axis)
    gph[0, 0].set_title('front left leg - toe x trajectory')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('x (m)')
    gph[0, 0].grid()
    gph[0, 1].plot(t_axis, z_fl_axis)
    gph[0, 1].set_title('front left leg - toe z trajectory')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('z (m)')
    gph[0, 1].grid()
    gph[0, 2].plot(x_fl_axis, z_fl_axis)
    gph[0, 2].plot(x_traj_sw_org, z_traj_sw_org)
    gph[0, 2].invert_yaxis()
    gph[0, 2].axvline(x=0, c='k')
    gph[0, 2].axhline(y=0, c='k')
    gph[0, 2].set_title('front left leg - toe trajectory')
    gph[0, 2].set_xlabel('x (m)')
    gph[0, 2].set_ylabel('z (m)')
    gph[0, 2].grid()
    gph[0, 2].legend(['real', 'desired'])
    gph[0, 3].plot(t_axis, vx_fl_axis)
    gph[0, 3].axhline(y=v_d, c='r')
    gph[0, 3].set_title('front left leg - toe x velocity')
    gph[0, 3].set_xlabel('t (s)')
    gph[0, 3].set_ylabel('vx (m/s)')
    gph[0, 3].grid()
    gph[0, 4].plot(t_axis, vz_fl_axis)
    gph[0, 4].set_title('front left leg - toe z velocity')
    gph[0, 4].set_xlabel('t (s)')
    gph[0, 4].set_ylabel('vz (m/s)')
    gph[0, 4].grid()
    gph[1, 0].plot(t_axis, x_fr_axis)
    gph[1, 0].set_title('front right leg - toe x trajectory')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('x (m)')
    gph[1, 0].grid()
    gph[1, 1].plot(t_axis, z_fr_axis)
    gph[1, 1].set_title('front right leg - toe z trajectory')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('z (m)')
    gph[1, 1].grid()
    gph[1, 2].plot(x_fr_axis, z_fr_axis)
    gph[1, 2].plot(x_traj_sw_org, z_traj_sw_org)
    gph[1, 2].invert_yaxis()
    gph[1, 2].axvline(x=0, c='k')
    gph[1, 2].axhline(y=0, c='k')
    gph[1, 2].set_title('front right leg - toe trajectory')
    gph[1, 2].set_xlabel('x (m)')
    gph[1, 2].set_ylabel('z (m)')
    gph[1, 2].grid()
    gph[1, 2].legend(['real', 'desired'])
    gph[1, 3].plot(t_axis, vx_fr_axis)
    gph[1, 3].axhline(y=v_d, c='r')
    gph[1, 3].set_title('front right leg - toe x velocity')
    gph[1, 3].set_xlabel('t (s)')
    gph[1, 3].set_ylabel('vx (m/s)')
    gph[1, 3].grid()
    gph[1, 4].plot(t_axis, vz_fr_axis)
    gph[1, 4].set_title('front right leg - toe z velocity')
    gph[1, 4].set_xlabel('t (s)')
    gph[1, 4].set_ylabel('vz (m/s)')
    gph[1, 4].grid()
    gph[2, 0].plot(t_axis, x_bl_axis)
    gph[2, 0].set_title('back left leg - toe x trajectory')
    gph[2, 0].set_xlabel('t (s)')
    gph[2, 0].set_ylabel('x (m)')
    gph[2, 0].grid()
    gph[2, 1].plot(t_axis, z_bl_axis)
    gph[2, 1].set_title('back left leg - toe z trajectory')
    gph[2, 1].set_xlabel('t (s)')
    gph[2, 1].set_ylabel('z (m)')
    gph[2, 1].grid()
    gph[2, 2].plot(x_bl_axis, z_bl_axis)
    gph[2, 2].plot(x_traj_sw_org, z_traj_sw_org)
    gph[2, 2].invert_yaxis()
    gph[2, 2].axvline(x=0, c='k')
    gph[2, 2].axhline(y=0, c='k')
    gph[2, 2].set_title('back left leg - toe trajectory')
    gph[2, 2].set_xlabel('x (m)')
    gph[2, 2].set_ylabel('z (m)')
    gph[2, 2].grid()
    gph[2, 2].legend(['real', 'desired'])
    gph[2, 3].plot(t_axis, vx_bl_axis)
    gph[2, 3].axhline(y=v_d, c='r')
    gph[2, 3].set_title('back left leg - toe x velocity')
    gph[2, 3].set_xlabel('t (s)')
    gph[2, 3].set_ylabel('vx (m/s)')
    gph[2, 3].grid()
    gph[2, 4].plot(t_axis, vz_bl_axis)
    gph[2, 4].set_title('back left leg - toe z velocity')
    gph[2, 4].set_xlabel('t (s)')
    gph[2, 4].set_ylabel('vz (m/s)')
    gph[2, 4].grid()
    gph[3, 0].plot(t_axis, x_br_axis)
    gph[3, 0].set_title('back right leg - toe x trajectory')
    gph[3, 0].set_xlabel('t (s)')
    gph[3, 0].set_ylabel('x (m)')
    gph[3, 0].grid()
    gph[3, 1].plot(t_axis, z_br_axis)
    gph[3, 1].set_title('back right leg - toe z trajectory')
    gph[3, 1].set_xlabel('t (s)')
    gph[3, 1].set_ylabel('z (m)')
    gph[3, 1].grid()
    gph[3, 2].plot(x_br_axis, z_br_axis)
    gph[3, 2].plot(x_traj_sw_org, z_traj_sw_org)
    gph[3, 2].invert_yaxis()
    gph[3, 2].axvline(x=0, c='k')
    gph[3, 2].axhline(y=0, c='k')
    gph[3, 2].set_title('back right leg - toe trajectory')
    gph[3, 2].set_xlabel('x (m)')
    gph[3, 2].set_ylabel('z (m)')
    gph[3, 2].grid()
    gph[3, 2].legend(['real', 'desired'])
    gph[3, 3].plot(t_axis, vx_br_axis)
    gph[3, 3].axhline(y=v_d, c='r')
    gph[3, 3].set_title('back right leg - toe x velocity')
    gph[3, 3].set_xlabel('t (s)')
    gph[3, 3].set_ylabel('vx (m/s)')
    gph[3, 3].grid()
    gph[3, 4].plot(t_axis, vz_br_axis)
    gph[3, 4].set_title('back right leg - toe z velocity')
    gph[3, 4].set_xlabel('t (s)')
    gph[3, 4].set_ylabel('vz (m/s)')
    gph[3, 4].grid()
    fig.savefig('./plots/solo_hopping_toe_trajectory.png')
    # evolution of stance time (the policy of updating t_st)
    fig, gph = plt.subplots()
    gph.plot(t_axis, t_st_front_axis)
    gph.plot(t_axis, t_st_back_axis)
    gph.grid()
    gph.set_title('evolution of stance time')
    gph.set_xlabel('t (s)')
    gph.set_ylabel('t_st (s)')
    gph.legend(['front', 'back'])
    fig.savefig('./plots/solo_hopping_stance_time.png')
    return


def plot_cnt(m, g, t_st_front_array, t_st_back_array, cnt_x_front, cnt_x_back, cnt_z_front, cnt_z_back):
    """
    Plot contact force profiles during one stance period.
    """
    fig, gph = plt.subplots(2, 2, constrained_layout=True, figsize=(12, 12))
    gph[0, 0].plot(t_st_front_array, cnt_x_front)
    gph[0, 0].grid()
    gph[0, 0].set_title('front legs - x contact profile')
    gph[0, 0].set_xlabel('t (s)')
    gph[0, 0].set_ylabel('F (N)')
    gph[0, 1].plot(t_st_front_array, cnt_z_front)
    gph[0, 1].axhline(y=m*g, c='r')
    gph[0, 1].grid()
    gph[0, 1].set_title('front legs - z contact profile')
    gph[0, 1].set_xlabel('t (s)')
    gph[0, 1].set_ylabel('F (N)')
    gph[1, 0].plot(t_st_back_array, cnt_x_back)
    gph[1, 0].grid()
    gph[1, 0].set_title('back legs - x contact profile')
    gph[1, 0].set_xlabel('t (s)')
    gph[1, 0].set_ylabel('F (N)')
    gph[1, 1].plot(t_st_back_array, cnt_z_back)
    gph[1, 1].axhline(y=m*g, c='r')
    gph[1, 1].grid()
    gph[1, 1].set_title('back legs - z contact profile')
    gph[1, 1].set_xlabel('t (s)')
    gph[1, 1].set_ylabel('F (N)')
    fig.savefig('./plots/solo_hopping_contact_forces_stance.png')
    return


def plot_afb(t_st_front_array, t_st_back_array, afb_front, afb_back):
    """
    Plot the activation feedback during one stance period.
    """
    fig, gph = plt.subplots(1, 2, constrained_layout=True, figsize=(12, 6))
    gph[0].plot(t_st_front_array, afb_front)
    gph[0].grid()
    gph[0].set_title('front legs - feedback activation')
    gph[0].set_xlabel('t (s)')
    gph[0].set_ylabel('feedback activation')
    gph[1].plot(t_st_back_array, afb_back)
    gph[1].grid()
    gph[1].set_title('back legs - feedback activation')
    gph[1].set_xlabel('t (s)')
    gph[1].set_ylabel('feedback activation')
    fig.savefig('./plots/solo_hopping_activation_feedback_stance.png')
    return
